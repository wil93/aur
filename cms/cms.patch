diff --git a/README.md b/README.md
index 21d2ba6..230a4c5 100644
--- a/README.md
+++ b/README.md
@@ -30,8 +30,8 @@ proposals and critics, get opinions and reviews, etc.) is
 <http://www.freelists.org/list/contestms-dev>.
 
 To help with the troubleshooting, you can collect the complete log
-files that are placed in /var/local/log/cms/ (if CMS was running
-installed) or in ./log (if it was running from the local copy).
+files that are placed in /var/log/cms/ (if CMS was running installed) or
+in ./log (if it was running from the local copy).
 
 
 Testimonials
diff --git a/cms/conf.py b/cms/conf.py
index 3ad0785..d3f6c3d 100644
--- a/cms/conf.py
+++ b/cms/conf.py
@@ -114,11 +114,11 @@ class Config(object):
             sys.argv[0] != '/usr/bin/python'
 
         if self.installed:
-            self.log_dir = os.path.join("/", "var", "local", "log", "cms")
-            self.cache_dir = os.path.join("/", "var", "local", "cache", "cms")
-            self.data_dir = os.path.join("/", "var", "local", "lib", "cms")
-            self.run_dir = os.path.join("/", "var", "local", "run", "cms")
-            paths = [os.path.join("/", "usr", "local", "etc", "cms.conf"),
+            self.log_dir = os.path.join("/", "var", "log", "cms")
+            self.cache_dir = os.path.join("/", "var", "cache", "cms")
+            self.data_dir = os.path.join("/", "var", "lib", "cms")
+            self.run_dir = os.path.join("/", "var", "run", "cms")
+            paths = [os.path.join("/", "usr", "etc", "cms.conf"),
                      os.path.join("/", "etc", "cms.conf")]
         else:
             self.log_dir = "log"
@@ -130,7 +130,7 @@ class Config(object):
                 paths += [os.path.abspath(os.path.join(
                           os.path.dirname(__file__),
                           '..', 'examples', 'cms.conf'))]
-            paths += [os.path.join("/", "usr", "local", "etc", "cms.conf"),
+            paths += [os.path.join("/", "usr", "etc", "cms.conf"),
                       os.path.join("/", "etc", "cms.conf")]
 
         # Allow user to override config file path using environment
diff --git a/cms/server/AdminWebServer.py b/cms/server/AdminWebServer.py
index 8096a9f..7a1a48c 100644
--- a/cms/server/AdminWebServer.py
+++ b/cms/server/AdminWebServer.py
@@ -206,8 +206,7 @@ class BaseHandler(CommonRequestHandler):
         self.contest = None
 
         if config.installed:
-            localization_dir = os.path.join("/", "usr", "local", "share",
-                                            "locale")
+            localization_dir = os.path.join("/", "usr", "share", "locale")
         else:
             localization_dir = os.path.join(os.path.dirname(__file__), "mo")
         if os.path.exists(localization_dir):
diff --git a/cms/server/ContestWebServer.py b/cms/server/ContestWebServer.py
index 5ed8dc4..22faf60 100644
--- a/cms/server/ContestWebServer.py
+++ b/cms/server/ContestWebServer.py
@@ -426,7 +426,7 @@ class ContestWebServer(WebService):
         # Retrieve the available translations.
         if config.installed:
             self.localization_dir = os.path.join(
-                "/", "usr", "local", "share", "locale")
+                "/", "usr", "share", "locale")
         else:
             self.localization_dir = os.path.join(
                 os.path.dirname(__file__), "mo")
diff --git a/cmsranking/Config.py b/cmsranking/Config.py
index b02ce29..aa62028 100644
--- a/cmsranking/Config.py
+++ b/cmsranking/Config.py
@@ -60,19 +60,15 @@ class Config(object):
 
         self.web_dir = pkg_resources.resource_filename("cmsranking", "static")
         if self.installed:
-            self.log_dir = os.path.join("/", "var", "local", "log",
-                                        "cms", "ranking")
-            self.lib_dir = os.path.join("/", "var", "local", "lib",
-                                        "cms", "ranking")
-            paths = [os.path.join("/", "usr", "local", "etc",
-                                  "cms.ranking.conf"),
+            self.log_dir = os.path.join("/", "var", "log", "cms", "ranking")
+            self.lib_dir = os.path.join("/", "var", "lib", "cms", "ranking")
+            paths = [os.path.join("/", "usr", "etc", "cms.ranking.conf"),
                      os.path.join("/", "etc", "cms.ranking.conf")]
         else:
             self.log_dir = os.path.join("log", "ranking")
             self.lib_dir = os.path.join("lib", "ranking")
             paths = [os.path.join(".", "examples", "cms.ranking.conf"),
-                     os.path.join("/", "usr", "local", "etc",
-                                  "cms.ranking.conf"),
+                     os.path.join("/", "usr", "etc", "cms.ranking.conf"),
                      os.path.join("/", "etc", "cms.ranking.conf")]
 
         try:
diff --git a/cmstaskenv/cmsMake.py b/cmstaskenv/cmsMake.py
index 90335cd..3fb042c 100755
--- a/cmstaskenv/cmsMake.py
+++ b/cmstaskenv/cmsMake.py
@@ -64,7 +64,7 @@ OUTPUT_DIRNAME = 'output'
 RESULT_DIRNAME = 'result'
 
 DATA_DIRS = [os.path.join('.', 'cmstaskenv', 'data'),
-             os.path.join('/', 'usr', 'local', 'share', 'cms', 'cmsMake')]
+             os.path.join('/', 'usr', 'share', 'cms', 'cmsMake')]
 
 
 def detect_data_dir():
diff --git a/cmstestsuite/RunFunctionalTests.py b/cmstestsuite/RunFunctionalTests.py
index ac1ce75..33c179b 100755
--- a/cmstestsuite/RunFunctionalTests.py
+++ b/cmstestsuite/RunFunctionalTests.py
@@ -421,7 +421,7 @@ def main():
     CONFIG["TEST_DIR"] = git_root
     CONFIG["CONFIG_PATH"] = "%s/examples/cms.conf" % CONFIG["TEST_DIR"]
     if CONFIG["TEST_DIR"] is None:
-        CONFIG["CONFIG_PATH"] = "/usr/local/etc/cms.conf"
+        CONFIG["CONFIG_PATH"] = "/usr/etc/cms.conf"
     cms_config = get_cms_config()
 
     if not config_is_usable(cms_config):
diff --git a/cmstestsuite/RunUnitTests.py b/cmstestsuite/RunUnitTests.py
index 53643bd..8c63ad8 100755
--- a/cmstestsuite/RunUnitTests.py
+++ b/cmstestsuite/RunUnitTests.py
@@ -185,7 +185,7 @@ def main():
     CONFIG["TEST_DIR"] = git_root
     CONFIG["CONFIG_PATH"] = "%s/examples/cms.conf" % CONFIG["TEST_DIR"]
     if CONFIG["TEST_DIR"] is None:
-        CONFIG["CONFIG_PATH"] = "/usr/local/etc/cms.conf"
+        CONFIG["CONFIG_PATH"] = "/usr/etc/cms.conf"
 
     if CONFIG["TEST_DIR"] is not None:
         # Set up our expected environment.
diff --git a/docs/Internals.rst b/docs/Internals.rst
index 1408bd6..1e81f6a 100644
--- a/docs/Internals.rst
+++ b/docs/Internals.rst
@@ -75,8 +75,8 @@ Setting the ``backdoor`` configuration key to true causes services to
 serve a Python console (accessible with netcat), running in the same
 interpreter instance as the service, allowing to inspect and modify its
 data, live. It will be bound to a local UNIX domain socket, usually at
-:file:`/var/local/run/cms/{service}_{shard}`. Access is granted only to
-users belonging to the cmsuser group.
+:file:`/var/run/cms/{service}_{shard}`. Access is granted only to users
+belonging to the cmsuser group.
 Although there's no authentication mechanism to prevent unauthorized
 access, the restrictions on the file should make it safe to run the
 backdoor everywhere, even on workers that are used as contestants'
@@ -86,7 +86,7 @@ following is a complete working connection command:
 
 .. sourcecode:: bash
 
-    rlwrap netcat -U /var/local/run/cms/EvaluationService_0
+    rlwrap netcat -U /var/run/cms/EvaluationService_0
 
 Substitute ``netcat`` with your implementation (``nc``, ``ncat``, etc.)
 if needed.
diff --git a/docs/RankingWebServer.rst b/docs/RankingWebServer.rst
index d37e3d7..7a9d8e3 100644
--- a/docs/RankingWebServer.rst
+++ b/docs/RankingWebServer.rst
@@ -13,7 +13,7 @@ To start RWS you have to execute ``cmsRankingWebServer``.
 Configuring it
 --------------
 
-The configuration file is named :file:`cms.ranking.conf` and RWS will search for it in :file:`/usr/local/etc` and in :file:`/etc` (in this order!). In case it's not found in any of these, RWS will use a hard-coded default configuration that can be found in :gh_blob:`cmsranking/Config.py`. If RWS is not installed then the :gh_tree:`examples` directory will also be checked for configuration files (note that for this to work your working directory needs to be root of the repository). In any case, as soon as you start it, RWS will tell you which configuration file it's using.
+The configuration file is named :file:`cms.ranking.conf` and RWS will search for it in :file:`/usr/etc` and in :file:`/etc` (in this order!). In case it's not found in any of these, RWS will use a hard-coded default configuration that can be found in :gh_blob:`cmsranking/Config.py`. If RWS is not installed then the :gh_tree:`examples` directory will also be checked for configuration files (note that for this to work your working directory needs to be root of the repository). In any case, as soon as you start it, RWS will tell you which configuration file it's using.
 
 The configuration file is a JSON object. The most important parameters are:
 
@@ -48,7 +48,7 @@ You also need to make sure that RWS is able to keep enough simultaneously active
 Managing it
 ===========
 
-RWS doesn't use the PostgreSQL database. Instead, it stores its data in :file:`/var/local/lib/cms/ranking` (or whatever directory is given as ``lib_dir`` in the configuration file) as a collection of JSON files. Thus, if you want to backup the RWS data, just make a copy of that directory. RWS modifies this data in response to specific (authenticated) HTTP requests it receives.
+RWS doesn't use the PostgreSQL database. Instead, it stores its data in :file:`/var/lib/cms/ranking` (or whatever directory is given as ``lib_dir`` in the configuration file) as a collection of JSON files. Thus, if you want to backup the RWS data, just make a copy of that directory. RWS modifies this data in response to specific (authenticated) HTTP requests it receives.
 
 The intended way to get data to RWS is to have the rest of CMS send it. The service responsible for that is ProxyService (PS for short). When PS is started for a certain contest, it will send the data for that contest to all RWSs it knows about (i.e. those in its configuration). This data includes the contest itself (its name, its begin and end times, etc.), its tasks, its users and the submissions received so far. Then it will continue to send new submissions as soon as they are scored and it will update them as needed (for example when a user uses a token). Note that hidden users (and their submissions) will not be sent to RWS.
 
diff --git a/setup.py b/setup.py
index f822aad..8e851a0 100755
--- a/setup.py
+++ b/setup.py
@@ -3,7 +3,7 @@
 
 # Contest Management System - http://cms-dev.github.io/
 # Copyright © 2010-2013 Giovanni Mascellani <mascellani@poisson.phc.unipi.it>
-# Copyright © 2010-2013 Stefano Maggiolo <s.maggiolo@gmail.com>
+# Copyright © 2010-2014 Stefano Maggiolo <s.maggiolo@gmail.com>
 # Copyright © 2010-2012 Matteo Boscariol <boscarim@hotmail.com>
 # Copyright © 2013 Luca Wehrstedt <luca.wehrstedt@gmail.com>
 #
@@ -40,6 +40,12 @@ from glob import glob
 from setuptools import setup
 
 
+# Root directories for the /usr and /var trees.
+ROOT = "MAKEPKG_INSTALL_ROOT"
+USR_ROOT = os.path.join(ROOT, "usr")
+VAR_ROOT = os.path.join(ROOT, "var")
+
+
 def do_setup():
     """Execute the setup thanks to setuptools.
 
@@ -269,16 +275,16 @@ def install():
     root = pwd.getpwnam("root")
     cmsuser_grp = grp.getgrnam("cmsuser")
 
-    print("copying isolate to /usr/local/bin/.")
-    makedir(os.path.join("/", "usr", "local", "bin"), root, 0755)
+    print("copying isolate to /usr/bin/.")
+    makedir(os.path.join(USR_ROOT, "bin"), root, 0755)
     copyfile(os.path.join(".", "isolate", "isolate"),
-             os.path.join("/", "usr", "local", "bin", "isolate"),
+             os.path.join(USR_ROOT, "bin", "isolate"),
              root, 04750, group=cmsuser_grp)
 
-    print("copying configuration to /usr/local/etc/.")
-    makedir(os.path.join("/", "usr", "local", "etc"), root, 0755)
+    print("copying configuration to /usr/etc/.")
+    makedir(os.path.join(USR_ROOT, "etc"), root, 0755)
     for conf_file_name in ["cms.conf", "cms.ranking.conf"]:
-        conf_file = os.path.join("/", "usr", "local", "etc", conf_file_name)
+        conf_file = os.path.join(USR_ROOT, "etc", conf_file_name)
         # Skip if destination is a symlink
         if os.path.islink(conf_file):
             continue
@@ -295,7 +301,7 @@ def install():
         country_code = re.search("/([^/]*)\.po", locale).groups()[0]
         print("  %s" % country_code)
         path = os.path.join("cms", "server", "mo", country_code, "LC_MESSAGES")
-        dest_path = os.path.join("/", "usr", "local", "share", "locale",
+        dest_path = os.path.join(USR_ROOT, "share", "locale",
                                  country_code, "LC_MESSAGES")
         makedir(dest_path, root, 0755)
         copyfile(os.path.join(path, "cms.mo"),
@@ -303,11 +309,12 @@ def install():
                  root, 0644)
 
     print("creating directories.")
-    dirs = [os.path.join("/", "var", "local", "log"),
-            os.path.join("/", "var", "local", "cache"),
-            os.path.join("/", "var", "local", "lib"),
-            os.path.join("/", "var", "local", "run"),
-            os.path.join("/", "usr", "local", "share")]
+    dirs = [os.path.join(VAR_ROOT, "log"),
+            os.path.join(VAR_ROOT, "cache"),
+            os.path.join(VAR_ROOT, "lib"),
+            os.path.join(ROOT, "run"),  # On Archlinux /var/run is a symlink to /run
+            os.path.join(USR_ROOT, "include"),
+            os.path.join(USR_ROOT, "share")]
     for _dir in dirs:
         # Skip if destination is a symlink
         if os.path.islink(os.path.join(_dir, "cms")):
